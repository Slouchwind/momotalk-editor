import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<string>
) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Content-Type', 'image/svg+xml');
  let { fill = 'fff' } = req.query;
  if (fill instanceof String) fill = fill.substring(0, 6);
  res.status(200).send(`<?xml version="1.0" encoding="utf-8"?>
  <svg width="48px" height="48px" viewBox="0 0 48 48" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <path d="M48 0L48 0L48 48L0 48L0 0L48 0Z" id="path_1" />
      <clipPath id="clip_1">
        <use xlink:href="#path_1" />
      </clipPath>
    </defs>
    <g id="Settings" clip-path="url(#clip_1)">
      <path d="M48 0L48 0L48 48L0 48L0 0L48 0Z" id="Settings" fill="none" stroke="none" />
      <path d="M24 4C22.4231 4 20.9027 4.19943 19.4512 4.53711C18.8308 4.6819 18.3696 5.20266 18.3008 5.83594L17.9824 8.73828C17.8783 9.68936 17.3289 10.5309 16.5 11.0098C15.6727 11.4877 14.6686 11.5407 13.793 11.1563L13.791 11.1563L11.125 9.98242C10.5422 9.72596 9.86101 9.86533 9.42578 10.3301C7.35329 12.5396 5.76268 15.2151 4.85938 18.2012C4.67497 18.8103 4.89496 19.4694 5.4082 19.8457L7.77344 21.5801C8.54579 22.1479 9 23.0428 9 24C9 24.9577 8.5458 25.8533 7.77344 26.4199L5.4082 28.1523C4.89496 28.5286 4.67497 29.1878 4.85938 29.7969C5.76258 32.7827 7.35193 35.4601 9.42578 37.6699C9.86148 38.134 10.5426 38.2726 11.125 38.0156L13.791 36.8418C14.6671 36.4565 15.6722 36.5119 16.5 36.9902C17.3289 37.4691 17.8783 38.3106 17.9824 39.2617L18.3008 42.1641C18.3701 42.796 18.8303 43.3157 19.4492 43.4609C20.9014 43.7998 22.4231 44 24 44C25.5769 44 27.0973 43.8006 28.5488 43.4629C29.1692 43.3181 29.6304 42.7973 29.6992 42.1641L30.0176 39.2617C30.1217 38.3106 30.6711 37.4691 31.5 36.9902C32.3273 36.5123 33.3314 36.4574 34.207 36.8418L36.875 38.0156C37.4574 38.2726 38.1385 38.134 38.5742 37.6699C40.6467 35.4604 42.2373 32.783 43.1406 29.7969C43.325 29.1878 43.105 28.5286 42.5918 28.1523L40.2266 26.4199C39.4542 25.8533 39 24.9577 39 24C39 23.0423 39.4542 22.1467 40.2266 21.5801L42.5918 19.8477C43.105 19.4714 43.325 18.8122 43.1406 18.2031C42.2373 15.217 40.6467 12.5396 38.5742 10.3301C38.1385 9.866 37.4574 9.72743 36.875 9.98438L34.207 11.1582C33.3314 11.5426 32.3273 11.4877 31.5 11.0098C30.6711 10.5309 30.1217 9.68936 30.0176 8.73828L29.6992 5.83594C29.6299 5.20397 29.1697 4.68433 28.5508 4.53906C27.0986 4.20016 25.5769 4 24 4L24 4ZM24 7C24.9743 7 25.9099 7.17488 26.8477 7.33984L27.0352 9.06445C27.243 10.9634 28.3469 12.6523 30 13.6074C31.6542 14.5631 33.6681 14.673 35.416 13.9043L37.002 13.207C38.2198 14.6694 39.184 16.3212 39.8574 18.1309L38.4512 19.1621C36.9115 20.2915 36 22.0897 36 24C36 25.9103 36.9115 27.7085 38.4512 28.8379L39.8574 29.8691C39.184 31.6788 38.2198 33.3306 37.002 34.793L35.416 34.0957C33.6681 33.327 31.6542 33.4369 30 34.3926C28.3469 35.3477 27.243 37.0366 27.0352 38.9355L26.8477 40.6602C25.91 40.8247 24.9738 41 24 41C23.0257 41 22.0901 40.8251 21.1523 40.6602L20.9648 38.9355C20.757 37.0366 19.6531 35.3477 18 34.3926C16.3458 33.4369 14.3319 33.327 12.584 34.0957L10.998 34.793C9.77998 33.3308 8.81594 31.679 8.14258 29.8691L9.54883 28.8379C11.0885 27.7085 12 25.9103 12 24C12 22.0897 11.0877 20.2904 9.54883 19.1602L8.14258 18.1289C8.81633 16.3185 9.78145 14.6678 11 13.2051L12.584 13.9023C14.3319 14.6711 16.3458 14.5631 18 13.6074C19.6531 12.6523 20.757 10.9634 20.9648 9.06445L21.1523 7.33984C22.09 7.17534 23.0262 7 24 7L24 7ZM24 16C19.5995 16 16 19.5995 16 24C16 28.4005 19.5995 32 24 32C28.4005 32 32 28.4005 32 24C32 19.5995 28.4005 16 24 16L24 16ZM24 19C26.7792 19 29 21.2208 29 24C29 26.7792 26.7792 29 24 29C21.2208 29 19 26.7792 19 24C19 21.2208 21.2208 19 24 19L24 19Z" id="Shape" fill="#${fill}" fill-rule="evenodd" stroke="none" />
    </g>
  </svg>`);
}